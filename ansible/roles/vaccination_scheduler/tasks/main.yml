---

- name: "create {{ postgresql_service_account }} service account in {{ namespace }}"
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ postgresql_service_account }}"
    namespace: "{{ namespace }}"

- name: create work directory
  file:
    path: "{{ work_dir }}/{{ postgresql_init_configmap }}"
    state: directory

- name: copy init files to work directory
  copy:
    src: "{{ item }}"
    dest: "{{ work_dir }}/{{ postgresql_init_configmap }}/"
  with_fileglob:
    - "{{ resources_dir }}/sql/*.sh"

- name: download sql scripts from remote repository
  get_url:
    url: "{{ item }}"
    dest: "{{ work_dir }}/{{ postgresql_init_configmap }}/"
  with_items:
     - "{{ psql_init_scripts }}"

- name: create {{ postgresql_init_configmap }} configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ postgresql_init_configmap }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ work_dir }}/{{ postgresql_init_configmap }}"

- name: copy postgresql template
  template:
    src: "{{ resources_dir }}/postgresql.yml"
    dest: "{{ work_dir }}/postgresql.yml"

- name: postgresql secret
  oc_secret:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ psql_credentials_secret }}"
    type: generic
    from_literal:
      database-user: "{{ psql_user_name }}"
      database-password: "{{ psql_user_passwd }}"
      database-name: "{{ psql_db_name }}"

- name: "check if {{ psql_app_name }} is deployed"
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ psql_app_name }}"
    namespace: "{{ namespace }}"
    kind: dc
  register: result

- name: "deploy {{ psql_app_name }}"
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/postgresql.yml"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""

- name: "wait until {{ psql_app_name }} database is up and running"
  shell: "{{ openshift_cli }} get dc {{ psql_app_name }} -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false
